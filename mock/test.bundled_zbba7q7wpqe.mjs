// mock/test.ts
var test_default = [
  {
    url: "/api/get",
    method: "get",
    response: ({ query }) => {
      return {
        code: 0,
        data: {
          name: "vben"
        }
      };
    }
  },
  {
    url: "/api/post",
    method: "post",
    timeout: 2e3,
    response: {
      code: 0,
      data: {
        name: "vben"
      }
    }
  },
  {
    url: "/api/text",
    method: "post",
    rawResponse: async (req, res) => {
      let reqbody = "";
      await new Promise((resolve) => {
        req.on("data", (chunk) => {
          reqbody += chunk;
        });
        req.on("end", () => resolve(void 0));
      });
      res.setHeader("Content-Type", "text/plain");
      res.statusCode = 200;
      res.end(`hello, ${reqbody}`);
    }
  }
];
export {
  test_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibW9jay90ZXN0LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX2luamVjdGVkX2ZpbGVuYW1lX18gPSBcIkQ6XFxcXGNvc21vc1xcXFxteS1wcm9qZWN0XFxcXEdvZ29cXFxcbW9ja1xcXFx0ZXN0LnRzXCI7Y29uc3QgX19pbmplY3RlZF9kaXJuYW1lX18gPSBcIkQ6XFxcXGNvc21vc1xcXFxteS1wcm9qZWN0XFxcXEdvZ29cXFxcbW9ja1wiO2NvbnN0IF9faW5qZWN0ZWRfaW1wb3J0X21ldGFfdXJsX18gPSBcImZpbGU6Ly8vRDovY29zbW9zL215LXByb2plY3QvR29nby9tb2NrL3Rlc3QudHNcIjtpbXBvcnQgeyBNb2NrQ29uZmlnLCBNb2NrTWV0aG9kIH0gZnJvbSAndml0ZS1wbHVnaW4tbW9jaydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFtcclxuICB7XHJcbiAgICB1cmw6ICcvYXBpL2dldCcsXHJcbiAgICBtZXRob2Q6ICdnZXQnLFxyXG4gICAgcmVzcG9uc2U6ICh7IHF1ZXJ5IH0pID0+IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBjb2RlOiAwLFxyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgIG5hbWU6ICd2YmVuJ1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcbiAge1xyXG4gICAgdXJsOiAnL2FwaS9wb3N0JyxcclxuICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgdGltZW91dDogMjAwMCxcclxuICAgIHJlc3BvbnNlOiB7XHJcbiAgICAgIGNvZGU6IDAsXHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICBuYW1lOiAndmJlbidcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcbiAge1xyXG4gICAgdXJsOiAnL2FwaS90ZXh0JyxcclxuICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgcmF3UmVzcG9uc2U6IGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gICAgICBsZXQgcmVxYm9keSA9ICcnXHJcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgcmVxLm9uKCdkYXRhJywgKGNodW5rKSA9PiB7XHJcbiAgICAgICAgICByZXFib2R5ICs9IGNodW5rXHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXEub24oJ2VuZCcsICgpID0+IHJlc29sdmUodW5kZWZpbmVkKSlcclxuICAgICAgfSlcclxuICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ3RleHQvcGxhaW4nKVxyXG4gICAgICByZXMuc3RhdHVzQ29kZSA9IDIwMFxyXG4gICAgICByZXMuZW5kKGBoZWxsbywgJHtyZXFib2R5fWApXHJcbiAgICB9XHJcbiAgfVxyXG5dIGFzIE1vY2tNZXRob2RbXVxyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBRUEsSUFBTyxlQUFRO0FBQUEsRUFDYjtBQUFBLElBQ0UsS0FBSztBQUFBLElBQ0wsUUFBUTtBQUFBLElBQ1IsVUFBVSxDQUFDLEVBQUUsTUFBTSxNQUFNO0FBQ3ZCLGFBQU87QUFBQSxRQUNMLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNKLE1BQU07QUFBQSxRQUNSO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUEsRUFDQTtBQUFBLElBQ0UsS0FBSztBQUFBLElBQ0wsUUFBUTtBQUFBLElBQ1IsU0FBUztBQUFBLElBQ1QsVUFBVTtBQUFBLE1BQ1IsTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLFFBQ0osTUFBTTtBQUFBLE1BQ1I7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBQ0E7QUFBQSxJQUNFLEtBQUs7QUFBQSxJQUNMLFFBQVE7QUFBQSxJQUNSLGFBQWEsT0FBTyxLQUFLLFFBQVE7QUFDL0IsVUFBSSxVQUFVO0FBQ2QsWUFBTSxJQUFJLFFBQVEsQ0FBQyxZQUFZO0FBQzdCLFlBQUksR0FBRyxRQUFRLENBQUMsVUFBVTtBQUN4QixxQkFBVztBQUFBLFFBQ2IsQ0FBQztBQUNELFlBQUksR0FBRyxPQUFPLE1BQU0sUUFBUSxNQUFTLENBQUM7QUFBQSxNQUN4QyxDQUFDO0FBQ0QsVUFBSSxVQUFVLGdCQUFnQixZQUFZO0FBQzFDLFVBQUksYUFBYTtBQUNqQixVQUFJLElBQUksVUFBVSxPQUFPLEVBQUU7QUFBQSxJQUM3QjtBQUFBLEVBQ0Y7QUFDRjsiLAogICJuYW1lcyI6IFtdCn0K
